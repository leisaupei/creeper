using Creeper.Driver;
using Creeper.Generic;
using Creeper.Oracle.Test.Entity.Model;
using Creeper.xUnitTest.Contracts;
using Creeper.xUnitTest.Extensions;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections.Generic;
using Xunit;

namespace Creeper.xUnitTest.Oracle
{
	public class InsertTest : BaseTest, IInsertTest
	{
		[Fact(Skip = "初始化数据")]
		public void Init()
		{
			var categories = new List<CategoryModel>();
			categories.Add(new CategoryModel { Id = SnowflakeId.Default().NextIdBase16(), Name = "数码" });
			categories.Add(new CategoryModel { Id = SnowflakeId.Default().NextIdBase16(), Name = "母婴" });
			categories.Add(new CategoryModel { Id = SnowflakeId.Default().NextIdBase16(), Name = "家具" });
			categories.Add(new CategoryModel { Id = SnowflakeId.Default().NextIdBase16(), Name = "日用" });
			categories.Add(new CategoryModel { Id = SnowflakeId.Default().NextIdBase16(), Name = "厨具" });
			var affrows = Context.InsertRange(categories);
			Assert.Equal(categories.Count, affrows);

			var products = new List<ProductModel>();
			products.Add(new ProductModel { Id = SnowflakeId.Default().NextIdBase16(), Price = 4999.5M, Name = "Apple", CategoryId = categories[0].Id, CreateTime = DateTime.Now, Stock = 99 });
			products.Add(new ProductModel { Id = SnowflakeId.Default().NextIdBase16(), Price = 300.55M, Name = "奶粉", CategoryId = categories[1].Id, CreateTime = DateTime.Now, Stock = 99 });
			products.Add(new ProductModel { Id = SnowflakeId.Default().NextIdBase16(), Price = 999.55M, Name = "办公桌", CategoryId = categories[2].Id, CreateTime = DateTime.Now, Stock = 99 });
			products.Add(new ProductModel { Id = SnowflakeId.Default().NextIdBase16(), Price = 50.55M, Name = "洗头水", CategoryId = categories[3].Id, CreateTime = DateTime.Now, Stock = 99 });
			products.Add(new ProductModel { Id = SnowflakeId.Default().NextIdBase16(), Price = 50.55M, Name = "碱液", CategoryId = categories[3].Id, CreateTime = DateTime.Now, Stock = 99 });
			products.Add(new ProductModel { Id = SnowflakeId.Default().NextIdBase16(), Price = 100.55M, Name = "电饭锅", CategoryId = categories[4].Id, CreateTime = DateTime.Now, Stock = 99 });
			var affrows1 = Context.InsertRange(products);
			Assert.Equal(products.Count, affrows1);
		}

		[Fact]
		public void DoubleUniqueCompositePk()
		{
			var result = Context.Insert(new UidCompositePkTestModel
			{
				Id = SnowflakeId.Default().NextIdBase16(),
				Name = "sam",
				Id2 = SnowflakeId.Default().NextIdBase16(),
			});
			Assert.Equal(1, result);
		}

		[Fact]
		public void IdentityPk()
		{
			//此表格类型是使用触发器触发序列
			var affrows = Context.Insert(new IdenPkTestModel
			{
				Name = "Xam",
			});
			Assert.Equal(1, affrows);

			//此表使用generated by default as identity(序列+Default)
			affrows = Context.Insert(new IdenColumnTestModel
			{
				Name = "Xam",
			});
			Assert.Equal(1, affrows);
		}
		[Fact(Skip = "暂不支持此方式批量插入")]
		public void InsertRangeMultiple()
		{
			var list = new List<IdenPkTestModel>();
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			var affrows = Context.InsertRange(list, false);
			Assert.Equal(list.Count, affrows);
		}

		[Fact]
		public void InsertRangeSingle()
		{
			var list = new List<IdenPkTestModel>();
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			list.Add(new IdenPkTestModel { Name = "Tam" });
			var affrows = Context.InsertRange(list);
			Assert.Equal(list.Count, affrows);
		}

		[Fact(Skip = "Oracle暂不支持RETURNING")]
		public void InsertReturning()
		{
			object result = null;
			//此处管道模式, 委托中Connection持续打开, 结束后Dispose();
			Context.ExecutePipe(execute =>
			{
				//执行
				var affrows = execute.ExecuteNonQuery(@"INSERT ""IdenPkTest"" (""Id"",""Name"") VALUES('xxxx','Sue')");
				if (affrows <= 0)
					return;
				/******伪代码
				if(自增主键) return;
				 */
				result = execute.ExecuteReaderFirst<object>(@"SELECT ""Id"",""Name"" FROM ""IdenPkTest"" WHERE ""Id"" = 'xxxx'");
			}, DataBaseType.Main);
		}

		[Fact]
		public void InsertWithWhere()
		{
			var info = new IdenPkTestModel { Name = "John" };
			var affrows = Context.Insert<IdenPkTestModel>().Set(info).WhereExists<IdenPkTestModel>(b => b.Where(a => a.Id == 20)).ToAffrows();
			Assert.Equal(1, affrows);
		}

		[Fact]
		public void UidPk()
		{
			var affrows = Context.Insert(new UniPkTestModel
			{
				Id = SnowflakeId.Default().NextIdBase16(),
				Name = "Xam",
			});
			Assert.Equal(1, affrows);
		}

		[Fact]
		public void UniqueAndIdentityCompositePk()
		{
			var result = Context.Insert(new IdenUidCompositePkTestModel
			{
				Uid = SnowflakeId.Default().NextIdBase16(),
				Name = "xxx"
			});
			Assert.Equal(1, result);
		}
	}
}
